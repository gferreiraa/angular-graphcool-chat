# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique
  name: String!
  email: String! @isUnique
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  chats: [Chat!]! @relation(name: "UserOnChats")
  messages: [Message!]! @relation(name: "MessagesOnUser")
  photo: File @relation(name: "UserPhoto")
}

type Chat @model {
  id: ID! @isUnique
  title: String!
  isGroup: Boolean! @defaultValue(value: "false")
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]! @relation(name: "UserOnChats")
  messages: [Message!]! @relation(name: "MessagesOnChat")
  photo: File @relation(name: "ChatPhoto")
}

type Message @model {
  id: ID! @isUnique
  text: String!
  createdAt: DateTime!
  sender: User! @relation(name: "MessagesOnUser")
  chat: Chat! @relation(name: "MessagesOnChat")
}

type File @model {
  id: ID! isUnique
  secret: String
  name: String
  size: Int
  url: String
  contentType: String
  user: User @relation(name: "UserPhoto")
  chat: Chat @relation(name: "ChatPhoto")
}

  # Uncomment below - you can declare relations between models like this

  # posts: [Post!]! @relation(name: "UserPosts")

# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }
